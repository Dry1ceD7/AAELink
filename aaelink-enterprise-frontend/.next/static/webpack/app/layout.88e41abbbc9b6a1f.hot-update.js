"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./lib/offline-storage.ts":
/*!********************************!*\
  !*** ./lib/offline-storage.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   offlineStorage: () => (/* binding */ offlineStorage)\n/* harmony export */ });\n/**\n * AAELink Enterprise Offline Storage\n * IndexedDB-based local storage with conflict resolution\n * Version: 1.2.0\n */ class OfflineStorage {\n    async init() {\n        return new Promise((resolve, reject)=>{\n            const request = indexedDB.open(this.dbName, this.version);\n            request.onerror = ()=>reject(request.error);\n            request.onsuccess = ()=>{\n                this.db = request.result;\n                resolve();\n            };\n            request.onupgradeneeded = (event)=>{\n                const db = event.target.result;\n                // Create object stores\n                if (!db.objectStoreNames.contains('messages')) {\n                    const messageStore = db.createObjectStore('messages', {\n                        keyPath: 'id'\n                    });\n                    messageStore.createIndex('timestamp', 'timestamp');\n                    messageStore.createIndex('synced', 'synced');\n                    messageStore.createIndex('type', 'type');\n                }\n                if (!db.objectStoreNames.contains('files')) {\n                    const fileStore = db.createObjectStore('files', {\n                        keyPath: 'id'\n                    });\n                    fileStore.createIndex('timestamp', 'timestamp');\n                    fileStore.createIndex('synced', 'synced');\n                    fileStore.createIndex('channelId', 'channelId');\n                }\n                if (!db.objectStoreNames.contains('events')) {\n                    const eventStore = db.createObjectStore('events', {\n                        keyPath: 'id'\n                    });\n                    eventStore.createIndex('timestamp', 'timestamp');\n                    eventStore.createIndex('synced', 'synced');\n                    eventStore.createIndex('startDate', 'startDate');\n                }\n                if (!db.objectStoreNames.contains('users')) {\n                    const userStore = db.createObjectStore('users', {\n                        keyPath: 'id'\n                    });\n                    userStore.createIndex('timestamp', 'timestamp');\n                    userStore.createIndex('synced', 'synced');\n                }\n                if (!db.objectStoreNames.contains('syncQueue')) {\n                    const syncStore = db.createObjectStore('syncQueue', {\n                        keyPath: 'id'\n                    });\n                    syncStore.createIndex('timestamp', 'timestamp');\n                    syncStore.createIndex('retries', 'retries');\n                }\n                if (!db.objectStoreNames.contains('conflicts')) {\n                    const conflictStore = db.createObjectStore('conflicts', {\n                        keyPath: 'id'\n                    });\n                    conflictStore.createIndex('timestamp', 'timestamp');\n                    conflictStore.createIndex('resolved', 'resolved');\n                }\n            };\n        });\n    }\n    setupEventListeners() {\n        if (false) {}\n        window.addEventListener('online', ()=>{\n            this.isOnline = true;\n            this.processSyncQueue();\n        });\n        window.addEventListener('offline', ()=>{\n            this.isOnline = false;\n        });\n    }\n    // Message operations\n    async saveMessage(message) {\n        const offlineData = {\n            id: this.generateId(),\n            type: 'message',\n            data: message,\n            timestamp: Date.now(),\n            synced: false\n        };\n        await this.saveToStore('messages', offlineData);\n        if (this.isOnline) {\n            this.addToSyncQueue('create', 'message', message);\n        }\n        return offlineData.id;\n    }\n    async getMessages(channelId) {\n        const messages = await this.getAllFromStore('messages');\n        if (channelId) {\n            return messages.filter((msg)=>msg.data.channelId === channelId).map((msg)=>msg.data).sort((a, b)=>a.timestamp - b.timestamp);\n        }\n        return messages.map((msg)=>msg.data).sort((a, b)=>a.timestamp - b.timestamp);\n    }\n    async updateMessage(id, updates) {\n        const message = await this.getFromStore('messages', id);\n        if (message) {\n            message.data = {\n                ...message.data,\n                ...updates\n            };\n            message.synced = false;\n            message.timestamp = Date.now();\n            await this.saveToStore('messages', message);\n            if (this.isOnline) {\n                this.addToSyncQueue('update', 'message', message.data);\n            }\n        }\n    }\n    async deleteMessage(id) {\n        await this.deleteFromStore('messages', id);\n        if (this.isOnline) {\n            this.addToSyncQueue('delete', 'message', {\n                id\n            });\n        }\n    }\n    // File operations\n    async saveFile(file) {\n        const offlineData = {\n            id: this.generateId(),\n            type: 'file',\n            data: file,\n            timestamp: Date.now(),\n            synced: false\n        };\n        await this.saveToStore('files', offlineData);\n        if (this.isOnline) {\n            this.addToSyncQueue('create', 'file', file);\n        }\n        return offlineData.id;\n    }\n    async getFiles(channelId) {\n        const files = await this.getAllFromStore('files');\n        if (channelId) {\n            return files.filter((file)=>file.data.channelId === channelId).map((file)=>file.data).sort((a, b)=>b.timestamp - a.timestamp);\n        }\n        return files.map((file)=>file.data).sort((a, b)=>b.timestamp - a.timestamp);\n    }\n    // Event operations\n    async saveEvent(event) {\n        const offlineData = {\n            id: this.generateId(),\n            type: 'event',\n            data: event,\n            timestamp: Date.now(),\n            synced: false\n        };\n        await this.saveToStore('events', offlineData);\n        if (this.isOnline) {\n            this.addToSyncQueue('create', 'event', event);\n        }\n        return offlineData.id;\n    }\n    async getEvents(startDate, endDate) {\n        const events = await this.getAllFromStore('events');\n        let filteredEvents = events.map((event)=>event.data);\n        if (startDate) {\n            filteredEvents = filteredEvents.filter((event)=>new Date(event.startDate) >= startDate);\n        }\n        if (endDate) {\n            filteredEvents = filteredEvents.filter((event)=>new Date(event.startDate) <= endDate);\n        }\n        return filteredEvents.sort((a, b)=>new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n    }\n    // User operations\n    async saveUser(user) {\n        const offlineData = {\n            id: user.id || this.generateId(),\n            type: 'user',\n            data: user,\n            timestamp: Date.now(),\n            synced: false\n        };\n        await this.saveToStore('users', offlineData);\n        if (this.isOnline) {\n            this.addToSyncQueue('update', 'user', user);\n        }\n        return offlineData.id;\n    }\n    async getUser(id) {\n        const user = await this.getFromStore('users', id);\n        return user ? user.data : null;\n    }\n    // Conflict resolution\n    async detectConflict(localData, serverData) {\n        if (!localData || !serverData) return false;\n        const localTimestamp = localData.timestamp || localData.updatedAt;\n        const serverTimestamp = serverData.timestamp || serverData.updatedAt;\n        return localTimestamp !== serverTimestamp;\n    }\n    async resolveConflict(conflictId, resolution) {\n        const conflict = await this.getFromStore('conflicts', conflictId);\n        if (!conflict) return;\n        let resolvedData;\n        switch(resolution){\n            case 'local':\n                resolvedData = conflict.localVersion;\n                break;\n            case 'server':\n                resolvedData = conflict.serverVersion;\n                break;\n            case 'merge':\n                resolvedData = this.mergeData(conflict.localVersion, conflict.serverVersion);\n                break;\n        }\n        // Update the original data\n        await this.saveToStore(conflict.type, {\n            id: conflict.id,\n            type: conflict.type,\n            data: resolvedData,\n            timestamp: Date.now(),\n            synced: true\n        });\n        // Remove from conflicts\n        await this.deleteFromStore('conflicts', conflictId);\n    }\n    mergeData(local, server) {\n        // Simple merge strategy - prefer non-null values\n        const merged = {\n            ...server\n        };\n        for(const key in local){\n            if (local[key] !== null && local[key] !== undefined) {\n                if (typeof local[key] === 'object' && typeof server[key] === 'object') {\n                    merged[key] = this.mergeData(local[key], server[key]);\n                } else {\n                    merged[key] = local[key];\n                }\n            }\n        }\n        return merged;\n    }\n    // Sync operations\n    async addToSyncQueue(action, type, data) {\n        const syncItem = {\n            id: this.generateId(),\n            action,\n            data,\n            timestamp: Date.now(),\n            retries: 0,\n            maxRetries: 3\n        };\n        await this.saveToStore('syncQueue', syncItem);\n        this.syncQueue.push(syncItem);\n        if (this.isOnline && !this.syncInProgress) {\n            this.processSyncQueue();\n        }\n    }\n    async processSyncQueue() {\n        if (this.syncInProgress || !this.isOnline) return;\n        this.syncInProgress = true;\n        try {\n            const queue = await this.getAllFromStore('syncQueue');\n            for (const item of queue){\n                try {\n                    await this.syncItem(item);\n                    await this.deleteFromStore('syncQueue', item.id);\n                } catch (error) {\n                    console.error('Sync failed for item:', item.id, error);\n                    item.retries++;\n                    if (item.retries >= item.maxRetries) {\n                        await this.deleteFromStore('syncQueue', item.id);\n                    } else {\n                        await this.saveToStore('syncQueue', item);\n                    }\n                }\n            }\n        } finally{\n            this.syncInProgress = false;\n        }\n    }\n    async syncItem(item) {\n        const { action, data, type } = item;\n        let url = '';\n        let method = 'POST';\n        switch(type){\n            case 'message':\n                url = '/api/chat/messages';\n                method = action === 'delete' ? 'DELETE' : 'POST';\n                break;\n            case 'file':\n                url = '/api/files/upload';\n                method = 'POST';\n                break;\n            case 'event':\n                url = '/api/calendar/events';\n                method = action === 'delete' ? 'DELETE' : 'POST';\n                break;\n            case 'user':\n                url = '/api/users/profile';\n                method = 'PUT';\n                break;\n        }\n        const response = await fetch(url, {\n            method,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': \"Bearer \".concat(this.getAuthToken())\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error(\"Sync failed: \".concat(response.statusText));\n        }\n    }\n    getAuthToken() {\n        return localStorage.getItem('authToken') || '';\n    }\n    // Utility methods\n    generateId() {\n        return \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    async saveToStore(storeName, data) {\n        if (!this.db) throw new Error('Database not initialized');\n        return new Promise((resolve, reject)=>{\n            const transaction = this.db.transaction([\n                storeName\n            ], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            const request = store.put(data);\n            request.onsuccess = ()=>resolve();\n            request.onerror = ()=>reject(request.error);\n        });\n    }\n    async getFromStore(storeName, id) {\n        if (!this.db) throw new Error('Database not initialized');\n        return new Promise((resolve, reject)=>{\n            const transaction = this.db.transaction([\n                storeName\n            ], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const request = store.get(id);\n            request.onsuccess = ()=>resolve(request.result);\n            request.onerror = ()=>reject(request.error);\n        });\n    }\n    async getAllFromStore(storeName) {\n        if (!this.db) throw new Error('Database not initialized');\n        return new Promise((resolve, reject)=>{\n            const transaction = this.db.transaction([\n                storeName\n            ], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const request = store.getAll();\n            request.onsuccess = ()=>resolve(request.result || []);\n            request.onerror = ()=>reject(request.error);\n        });\n    }\n    async deleteFromStore(storeName, id) {\n        if (!this.db) throw new Error('Database not initialized');\n        return new Promise((resolve, reject)=>{\n            const transaction = this.db.transaction([\n                storeName\n            ], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            const request = store.delete(id);\n            request.onsuccess = ()=>resolve();\n            request.onerror = ()=>reject(request.error);\n        });\n    }\n    // Public API\n    async clearAllData() {\n        if (!this.db) return;\n        const storeNames = [\n            'messages',\n            'files',\n            'events',\n            'users',\n            'syncQueue',\n            'conflicts'\n        ];\n        for (const storeName of storeNames){\n            const transaction = this.db.transaction([\n                storeName\n            ], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            await store.clear();\n        }\n    }\n    async getStorageInfo() {\n        const storeNames = [\n            'messages',\n            'files',\n            'events',\n            'users'\n        ];\n        const byType = {};\n        let total = 0;\n        for (const storeName of storeNames){\n            const count = await this.getStoreCount(storeName);\n            byType[storeName] = count;\n            total += count;\n        }\n        return {\n            total,\n            byType\n        };\n    }\n    async getStoreCount(storeName) {\n        if (!this.db) return 0;\n        return new Promise((resolve, reject)=>{\n            const transaction = this.db.transaction([\n                storeName\n            ], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const request = store.count();\n            request.onsuccess = ()=>resolve(request.result);\n            request.onerror = ()=>reject(request.error);\n        });\n    }\n    constructor(){\n        this.dbName = 'AAELinkOffline';\n        this.version = 1;\n        this.db = null;\n        this.syncQueue = [];\n        this.isOnline = navigator.onLine;\n        this.syncInProgress = false;\n        this.init();\n        this.setupEventListeners();\n    }\n}\n// Export singleton instance\nconst offlineStorage = new OfflineStorage();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (offlineStorage);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/offline-storage.ts\n"));

/***/ })

});