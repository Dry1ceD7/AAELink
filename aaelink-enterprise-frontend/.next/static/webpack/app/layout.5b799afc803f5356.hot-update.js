"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./lib/offline-manager.ts":
/*!********************************!*\
  !*** ./lib/offline-manager.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   offlineManager: () => (/* binding */ offlineManager)\n/* harmony export */ });\n/* harmony import */ var _offline_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./offline-storage */ \"(app-pages-browser)/./lib/offline-storage.ts\");\n/**\n * AAELink Enterprise Offline Manager\n * Handles offline state, sync status, and conflict resolution\n * Version: 1.2.0\n */ \nclass OfflineManager {\n    setupEventListeners() {\n        if (false) {}\n        window.addEventListener('online', ()=>{\n            this.isOnline = true;\n            this.notifyListeners();\n            this.startSync();\n        });\n        window.addEventListener('offline', ()=>{\n            this.isOnline = false;\n            this.notifyListeners();\n        });\n        // Listen for visibility change to sync when tab becomes active\n        document.addEventListener('visibilitychange', ()=>{\n            if (!document.hidden && this.isOnline) {\n                this.startSync();\n            }\n        });\n    }\n    async loadLastSync() {\n        const lastSyncStr = localStorage.getItem('aaelink_last_sync');\n        if (lastSyncStr) {\n            this.lastSync = new Date(lastSyncStr);\n        }\n    }\n    async saveLastSync() {\n        this.lastSync = new Date();\n        localStorage.setItem('aaelink_last_sync', this.lastSync.toISOString());\n    }\n    // Public API\n    getStatus() {\n        return {\n            isOnline: this.isOnline,\n            lastSync: this.lastSync,\n            pendingSync: 0,\n            conflicts: 0,\n            storageUsed: 0,\n            storageTotal: 0 // Will be updated by storage info\n        };\n    }\n    getSyncProgress() {\n        return {\n            ...this.syncProgress\n        };\n    }\n    // Event listeners\n    addStatusListener(listener) {\n        this.listeners.add(listener);\n        return ()=>this.listeners.delete(listener);\n    }\n    addSyncProgressListener(listener) {\n        this.syncListeners.add(listener);\n        return ()=>this.syncListeners.delete(listener);\n    }\n    notifyListeners() {\n        const status = this.getStatus();\n        this.listeners.forEach((listener)=>{\n            try {\n                listener(status);\n            } catch (error) {\n                console.error('Error in status listener:', error);\n            }\n        });\n    }\n    notifySyncListeners() {\n        this.syncListeners.forEach((listener)=>{\n            try {\n                listener(this.syncProgress);\n            } catch (error) {\n                console.error('Error in sync listener:', error);\n            }\n        });\n    }\n    // Sync operations\n    async startSync() {\n        if (!this.isOnline) {\n            console.log('[OfflineManager] Cannot sync - offline');\n            return;\n        }\n        console.log('[OfflineManager] Starting sync...');\n        try {\n            // Get sync queue count\n            const storageInfo = await _offline_storage__WEBPACK_IMPORTED_MODULE_0__.offlineStorage.getStorageInfo();\n            this.syncProgress = {\n                total: storageInfo.total,\n                completed: 0,\n                failed: 0,\n                current: 'Starting sync...'\n            };\n            this.notifySyncListeners();\n            // Process sync queue\n            await _offline_storage__WEBPACK_IMPORTED_MODULE_0__.offlineStorage.processSyncQueue();\n            // Update progress\n            this.syncProgress.completed = this.syncProgress.total;\n            this.syncProgress.current = 'Sync completed';\n            this.notifySyncListeners();\n            // Save last sync time\n            await this.saveLastSync();\n            console.log('[OfflineManager] Sync completed successfully');\n        } catch (error) {\n            console.error('[OfflineManager] Sync failed:', error);\n            this.syncProgress.failed++;\n            this.syncProgress.current = 'Sync failed';\n            this.notifySyncListeners();\n        }\n    }\n    async forceSync() {\n        console.log('[OfflineManager] Force sync requested');\n        await this.startSync();\n    }\n    // Conflict resolution\n    async detectConflicts() {\n        // This would typically check for conflicts between local and server data\n        // For now, return empty array as conflicts are handled during sync\n        return [];\n    }\n    async resolveConflict(conflictId, resolution) {\n        await _offline_storage__WEBPACK_IMPORTED_MODULE_0__.offlineStorage.resolveConflict(conflictId, resolution);\n    }\n    // Storage management\n    async getStorageInfo() {\n        const info = await _offline_storage__WEBPACK_IMPORTED_MODULE_0__.offlineStorage.getStorageInfo();\n        // Estimate storage usage (rough calculation)\n        const estimatedSize = info.total * 1024; // Assume 1KB per item average\n        const totalStorage = 50 * 1024 * 1024; // 50MB limit\n        return {\n            used: estimatedSize,\n            total: totalStorage,\n            byType: info.byType\n        };\n    }\n    async clearOfflineData() {\n        await _offline_storage__WEBPACK_IMPORTED_MODULE_0__.offlineStorage.clearAllData();\n        this.lastSync = null;\n        localStorage.removeItem('aaelink_last_sync');\n        this.notifyListeners();\n    }\n    // Utility methods\n    isDataStale() {\n        let maxAgeMinutes = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5;\n        if (!this.lastSync) return true;\n        const now = new Date();\n        const diffMinutes = (now.getTime() - this.lastSync.getTime()) / (1000 * 60);\n        return diffMinutes > maxAgeMinutes;\n    }\n    async getOfflineCapabilities() {\n        return {\n            canWorkOffline: true,\n            features: [\n                'View cached messages',\n                'Compose new messages',\n                'Access uploaded files',\n                'View calendar events',\n                'Search local data',\n                'User profile management'\n            ],\n            limitations: [\n                'Real-time updates disabled',\n                'File uploads queued for sync',\n                'New user registration disabled',\n                'Admin functions limited'\n            ]\n        };\n    }\n    // Background sync registration\n    async registerBackgroundSync() {\n        if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {\n            try {\n                const registration = await navigator.serviceWorker.ready;\n                await registration.sync.register('offline-messages');\n                await registration.sync.register('offline-files');\n                await registration.sync.register('offline-events');\n                console.log('[OfflineManager] Background sync registered');\n            } catch (error) {\n                console.error('[OfflineManager] Failed to register background sync:', error);\n            }\n        }\n    }\n    // Push notification setup\n    async requestNotificationPermission() {\n        if (!('Notification' in window)) {\n            console.log('[OfflineManager] Notifications not supported');\n            return false;\n        }\n        if (Notification.permission === 'granted') {\n            return true;\n        }\n        if (Notification.permission === 'denied') {\n            console.log('[OfflineManager] Notifications denied');\n            return false;\n        }\n        const permission = await Notification.requestPermission();\n        return permission === 'granted';\n    }\n    // Health check\n    async healthCheck() {\n        const issues = [];\n        const recommendations = [];\n        // Check online status\n        if (!this.isOnline) {\n            issues.push('Currently offline');\n            recommendations.push('Connect to internet for full functionality');\n        }\n        // Check storage\n        const storageInfo = await this.getStorageInfo();\n        const usagePercent = storageInfo.used / storageInfo.total * 100;\n        if (usagePercent > 90) {\n            issues.push('Storage nearly full');\n            recommendations.push('Clear offline data or increase storage limit');\n        }\n        // Check last sync\n        if (this.isDataStale(30)) {\n            issues.push('Data may be stale');\n            recommendations.push('Sync with server when online');\n        }\n        // Check service worker\n        if (!('serviceWorker' in navigator)) {\n            issues.push('Service worker not supported');\n            recommendations.push('Use a modern browser for offline features');\n        }\n        let status;\n        if (issues.length === 0) {\n            status = 'healthy';\n        } else if (issues.length <= 2) {\n            status = 'degraded';\n        } else {\n            status = 'unhealthy';\n        }\n        return {\n            status,\n            issues,\n            recommendations\n        };\n    }\n    constructor(){\n        this.isOnline =  true ? navigator.onLine : 0;\n        this.lastSync = null;\n        this.syncProgress = {\n            total: 0,\n            completed: 0,\n            failed: 0,\n            current: null\n        };\n        this.listeners = new Set();\n        this.syncListeners = new Set();\n        this.setupEventListeners();\n        this.loadLastSync();\n    }\n}\n// Export singleton instance\nconst offlineManager = new OfflineManager();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (offlineManager);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/offline-manager.ts\n"));

/***/ })

});