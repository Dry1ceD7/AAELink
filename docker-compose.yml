version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: aaelink-postgres
    environment:
      POSTGRES_DB: aaelink
      POSTGRES_USER: aaelink
      POSTGRES_PASSWORD: aaelink123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aaelink-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aaelink -d aaelink"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aaelink-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aaelink-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO File Storage
  minio:
    image: minio/minio:latest
    container_name: aaelink-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - aaelink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: aaelink-backend
    environment:
      DATABASE_URL: postgresql://aaelink:aaelink123@postgres:5432/aaelink?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-here
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: aaelink-files
      FRONTEND_URL: http://localhost:3000
      NODE_ENV: development
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aaelink-network
    volumes:
      - ./packages/backend:/app
      - /app/node_modules

  # Frontend
  frontend:
    build:
      context: ./aaelink-frontend
      dockerfile: Dockerfile
    container_name: aaelink-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - aaelink-network
    volumes:
      - ./aaelink-frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  aaelink-network:
    driver: bridge