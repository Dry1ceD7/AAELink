name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  # Lint and Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linter
        run: bun run lint

      - name: Type check
        run: bun run type-check

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [backend, frontend, shared]
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests for ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          bun test --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: packages/${{ matrix.package }}/coverage
          flags: ${{ matrix.package }}

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run migrations
        run: |
          cd packages/backend
          bun run db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Run integration tests
        run: bun test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

  # E2E Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps

      - name: Start services
        run: |
          docker-compose up -d
          sleep 10

      - name: Run E2E tests
        run: bun test:e2e

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Lighthouse Performance Tests
  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build frontend
        run: |
          cd packages/frontend
          bun run build

      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/login
            http://localhost:3000/channels
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
          configPath: ./lighthouse.config.js

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm audit --audit-level=high
        continue-on-error: true

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [lint, test-unit, test-integration]
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./packages/${{ matrix.service }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build Tauri Desktop Apps
  build-desktop:
    name: Build Desktop Apps
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [lint, test-unit]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build Tauri app
        run: |
          cd packages/desktop
          bun run tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: desktop-${{ matrix.os }}
          path: packages/desktop/src-tauri/target/release/bundle/
          retention-days: 7

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [build-docker, test-e2e, lighthouse, security]
    environment:
      name: staging
      url: https://staging.aaelink.company.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging..."
          # Add actual deployment commands here
          # ssh deploy@staging "docker-compose pull && docker-compose up -d"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-docker, build-desktop, test-e2e, lighthouse, security]
    environment:
      name: production
      url: https://aaelink.company.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "Deploying to production..."
          # Add actual deployment commands here
          # ssh deploy@production "docker-compose pull && docker-compose up -d"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            packages/desktop/src-tauri/target/release/bundle/**/*
          generate_release_notes: true
          draft: false
          prerelease: false

  # Notify on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Send notification
        run: |
          echo "Pipeline failed - sending notification"
          # Add actual notification logic (Slack, email, etc.)
