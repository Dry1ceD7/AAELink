name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.0.0'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        cd packages/backend && bun install
        cd ../frontend && bun install
        
    - name: Run backend tests
      run: |
        cd packages/backend
        bun test --coverage
        
    - name: Run frontend tests
      run: |
        cd packages/frontend
        bun test --coverage
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./packages/backend/coverage/lcov.info,./packages/frontend/coverage/lcov.info

  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        cd packages/backend && bun install
        cd ../frontend && bun install
        
    - name: Run ESLint
      run: |
        cd packages/backend && bun run lint
        cd ../frontend && bun run lint
        
    - name: Run Prettier
      run: |
        cd packages/backend && bun run format:check
        cd ../frontend && bun run format:check

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        cd packages/backend && bun install
        cd ../frontend && bun install
        
    - name: Build backend
      run: |
        cd packages/backend
        bun run build
        
    - name: Build frontend
      run: |
        cd packages/frontend
        bun run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          packages/backend/dist
          packages/frontend/dist

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        cd packages/backend && bun install
        cd ../frontend && bun install
        
    - name: Install Playwright
      run: |
        cd packages/frontend
        bunx playwright install --with-deps
        
    - name: Start backend
      run: |
        cd packages/backend
        bun run dev &
        sleep 10
        
    - name: Start frontend
      run: |
        cd packages/frontend
        bun run dev &
        sleep 10
        
    - name: Run E2E tests
      run: |
        cd packages/frontend
        bunx playwright test
        
    - name: Upload E2E results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: packages/frontend/playwright-report

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        cd packages/backend && bun install
        cd ../frontend && bun install
        
    - name: Run security audit
      run: |
        cd packages/backend && bun audit
        cd ../frontend && bun audit
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, lint, build, e2e, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here