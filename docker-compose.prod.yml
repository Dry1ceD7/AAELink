version: '3.9'

services:
  # Backend API
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: aaelink-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgresql://aaelink:${POSTGRES_PASSWORD}@postgres:5432/aaelink_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: https://${DOMAIN}
      SESSION_SECRET: ${SESSION_SECRET}
      WEBAUTHN_RP_ID: ${DOMAIN}
      WEBAUTHN_RP_NAME: AAELink
      WEBAUTHN_ORIGIN: https://${DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - aaelink-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React + Nginx)
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: https://${DOMAIN}/api
        VITE_WS_URL: wss://${DOMAIN}/ws
    container_name: aaelink-frontend-prod
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - aaelink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: aaelink-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: aaelink
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: aaelink_db
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - aaelink-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aaelink -d aaelink_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aaelink-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - aaelink-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: aaelink-minio-prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: https://${DOMAIN}/minio
    volumes:
      - minio_data:/data
    networks:
      - aaelink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aaelink-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - aaelink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SigNoz for Observability
  signoz-frontend:
    image: signoz/frontend:latest
    container_name: aaelink-signoz-frontend
    restart: unless-stopped
    depends_on:
      - signoz-query-service
    ports:
      - "3301:3301"
    networks:
      - aaelink-network
    profiles:
      - monitoring

  signoz-query-service:
    image: signoz/query-service:latest
    container_name: aaelink-signoz-query
    restart: unless-stopped
    environment:
      - ClickHouseUrl=tcp://clickhouse:9000
    depends_on:
      - clickhouse
    networks:
      - aaelink-network
    profiles:
      - monitoring

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: aaelink-clickhouse
    restart: unless-stopped
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - aaelink-network
    profiles:
      - monitoring

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: aaelink-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    depends_on:
      - signoz-query-service
    networks:
      - aaelink-network
    profiles:
      - monitoring

  # Automated Backups
  backup:
    image: postgres:16-alpine
    container_name: aaelink-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - aaelink-network
    profiles:
      - backup
    command: ["sh", "/backup.sh"]

networks:
  aaelink-network:
    driver: bridge
    name: aaelink-prod-network

volumes:
  postgres_data:
    driver: local
    name: aaelink-postgres-data
  redis_data:
    driver: local
    name: aaelink-redis-data
  minio_data:
    driver: local
    name: aaelink-minio-data
  clickhouse_data:
    driver: local
    name: aaelink-clickhouse-data
