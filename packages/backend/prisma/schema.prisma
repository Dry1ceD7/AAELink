// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      Role     @default(USER)
  status    UserStatus @default(OFFLINE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages     Message[]
  reactions    Reaction[]
  organizations OrganizationMember[]
  channels     ChannelMember[]
  files        File[]
  events       EventParticipant[]

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members OrganizationMember[]
  channels Channel[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           OrgRole      @default(MEMBER)
  joinedAt       DateTime     @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Channel {
  id             String      @id @default(cuid())
  name           String
  description    String?
  type           ChannelType @default(PUBLIC)
  organizationId String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members     ChannelMember[]
  messages    Message[]

  @@map("channels")
}

model ChannelMember {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  joinedAt  DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@map("channel_members")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  channelId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  channel   Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]
  files     File[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("reactions")
}

model File {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  messageId String?
  userId    String
  createdAt DateTime @default(now())

  // Relations
  message Message? @relation(fields: [messageId], references: [id], onDelete: SetNull)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  isAllDay    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  participants EventParticipant[]

  @@map("events")
}

model EventParticipant {
  id      String @id @default(cuid())
  eventId String
  userId  String
  status  EventStatus @default(TENTATIVE)

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_participants")
}

// Enums
enum Role {
  ADMIN
  USER
  MODERATOR
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT
}

enum EventStatus {
  ACCEPTED
  DECLINED
  TENTATIVE
}
